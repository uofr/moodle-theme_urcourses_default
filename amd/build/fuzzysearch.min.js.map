{"version":3,"sources":["../src/fuzzysearch.js"],"names":["_GRAM_SIZE_UPPER","_dictionary","_gramMap","_originals","setDictionary","dictionary","forEach","word","gramSize","addWord","wordLower","toLowerCase","grams","getGrams","wordNormal","getVectorNormal","push","wordIndex","length","gram","gramCount","lookup","matches","dict","results","index","count","matchIndex","dotProduct","matchNormal","matchingWord","sort","a","b","filter","match","sumOfSquareOfGramCounts","Math","pow","sqrt","string","gramMap","stringConverted","convertString","i","slice","newString","replace","lengthDifference","padEnd","search","map","result"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Theme Boost Campus - Partial string matching algorithm.\n *\n * Stores a dictionary of words.\n * Predicts partial strings based on words in dictionary. Returns the words most similar to the partial string.\n *\n * @module    theme_uofr_conservatory/fuzzysearch\n * @author John Lane\n*/\n\n/** @const _GRAM_SIZE_LOWER Gram size lower limit. */\nconst _GRAM_SIZE_LOWER = 2;\n\n/** @const _GRAM_SIZE_UPPER Gram size upper limit. */\nconst _GRAM_SIZE_UPPER = 3;\n\n/** @const _MIN_SCORE Minimum viable score to be considered a potential match. */\nconst _MIN_SCORE = 0;\n\n/** @var _dictionary Stores words and their vector normals for each gram size. */\n/**\n *\n * _dictionary = {\n *      gramSize: [ [normal, word], [normal, word], ... ]\n * };\n *\n */\nlet _dictionary = {};\n\n/** @var _gramMap Stores grams from dictionary words. Grams stored along with where they appear and how often.*/\n/**\n *\n * _gramMap = {\n *      gram: [indexToWord, count]\n * };\n *\n */\nlet _gramMap = {};\n\n/** @var _originals Maps lowercase words to their original version. */\n/**\n *\n * _originals = {\n *      word: original,\n *      word: original,\n *      ...\n * };\n *\n */\nlet _originals = {};\n\n/**\n * Set dictionary to be used in @see search().\n * @param {Array} dictionary A list of words.\n*/\nconst setDictionary = (dictionary) => {\n    if (_dictionary) {\n        _dictionary = {};\n        _gramMap = {};\n        _originals = {};\n    }\n\n    dictionary.forEach(function(word) {\n        for (let gramSize = _GRAM_SIZE_LOWER; gramSize < _GRAM_SIZE_UPPER + 1; gramSize++) {\n            addWord(word, gramSize);\n        }\n    });\n};\n\n/**\n * Stores the specified word.\n * @param {String} word Word to add to dictionaries.\n * @param {Number} gramSize Gram size to use.\n */\nconst addWord = (word, gramSize = 3) => {\n    const wordLower = word.toLowerCase();\n    const grams = getGrams(word, gramSize);\n    const wordNormal = getVectorNormal(grams);\n\n    // save the original word\n    _originals[wordLower] = word;\n\n    // save word along with magnitude for the given gram size\n    if (_dictionary[gramSize]) {\n        _dictionary[gramSize].push([wordNormal, wordLower]);\n    } else {\n        _dictionary[gramSize] = [[wordNormal, wordLower]];\n    }\n\n    // store grams along with where their word appears in the dictionary\n    const wordIndex = _dictionary[gramSize].length - 1;\n    for (const gram in grams) {\n        const gramCount = grams[gram];\n        if (gram in _gramMap) {\n            _gramMap[gram].push([wordIndex, gramCount]);\n        } else {\n            _gramMap[gram] = [[wordIndex, gramCount]];\n        }\n    }\n};\n\n/**\n * Search dictionary for potential matches of @param word.\n * @param {String} word\n * @return {Array} Array of potential matches ordered from most to least likely. Original words are returned.\n */\nconst search = (word) => {\n    for (let gramSize = _GRAM_SIZE_UPPER; gramSize >= _GRAM_SIZE_LOWER; gramSize--) {\n        const results = lookup(word, gramSize);\n        if (results) {return results.map(result => _originals[result[1]]);}\n    }\n    return null;\n};\n\n/**\n * Lookup the word at the given gram size.\n * @param {String} word\n * @param {Number} gramSize\n * @return {Array} Array of words and their score [[score, word], [score, word], ...]\n */\nconst lookup = (word, gramSize) => {\n    const grams = getGrams(word, gramSize);\n    const wordNormal = getVectorNormal(grams);\n    const matches = {}; // matches stores the index of each potential match and the associated dot product\n    const dict = _dictionary[gramSize]; // dictionary of words for the given gram size\n    const results = [];\n\n    for (const gram in grams) {\n        const gramCount = grams[gram];\n        if (gram in _gramMap) { // if gram is in _gramMap, there are potential matching words\n            for (const [index, count] of _gramMap[gram]) { // for each gram in the map, get the index of the match and count\n                // get the dot product of the two vectors\n                if (index in matches) {\n                    matches[index] += gramCount * count;\n                } else {\n                    matches[index] = gramCount * count;\n                }\n            }\n        }\n    }\n\n    if (!matches) {return null; }// if there are no potential matches, return null\n\n    // for each potential match, calculate the cosine similarity score (divide dot product by the product of each normal)\n    for (const matchIndex in matches) {\n        const dotProduct = matches[matchIndex];\n        const [matchNormal, matchingWord] = dict[matchIndex];\n        const crossProduct = wordNormal * matchNormal;\n        const cosineSimilarity = dotProduct / crossProduct;\n        results.push([cosineSimilarity, matchingWord]);\n    }\n\n    return results.sort((a, b) => b[0] - a[0]).filter((match) => match[0] >= _MIN_SCORE);\n};\n\n/**\n * Calculate a word's vector normal from its grams.\n * @param {String} grams  Grams of word who's vector normal will be calculated.\n * @return {Number} Vector normal of word.\n */\nconst getVectorNormal = (grams) => {\n    let sumOfSquareOfGramCounts = 0;\n    for (const gram in grams) {\n        const gramCount = grams[gram];\n        sumOfSquareOfGramCounts += Math.pow(gramCount, 2);\n    }\n    return Math.sqrt(sumOfSquareOfGramCounts);\n};\n\n/**\n * Converts a string into a map of grams and their associated counts.\n *\n * @param {String} string String to be split.\n * @param {Number} gramSize Size of the substrings (grams).\n * @returns {Object} A map of grams along with how many times they appear in the string (ie: {gram: count...)\n */\nconst getGrams = (string, gramSize = 3) => {\n    const gramMap = {};\n    const stringConverted = convertString(string, gramSize);\n\n    for (let i = 0; i < stringConverted.length - gramSize + 1; i++) {\n        const gram = stringConverted.slice(i, i + gramSize);\n        if (gram in gramMap) {\n            gramMap[gram] += 1;\n        } else {\n            gramMap[gram] = 1;\n        }\n    }\n\n    return gramMap;\n};\n\n/**\n * Converts string into a format which can be used by @see getGrams\n * Adds '-' to the start and end of a string, removes non-word characters.\n * If the string is smaller than the gramSize, '-'s are added to the end until the lengths match.\n *\n * @param {String} string - The string to be converted.\n * @param {Number} gramSize - Length of grams.\n * @returns {String} - String converted into a format that can be used by getGrams.\n */\nconst convertString = (string, gramSize = 3) => {\n    const nonWordRegex = /[^a-zA-Z0-9\\u00C0-\\u00FF, ]+/g;\n    const newString = '-' + string.toLowerCase().replace(nonWordRegex, '') + '-';\n    if (newString.length < gramSize) {\n        const lengthDifference = gramSize - string.length;\n        return newString.padEnd((newString.length + lengthDifference), '-');\n    } else {\n        return newString;\n    }\n};\n\nexport default {\n    setDictionary: setDictionary,\n    search: search\n};"],"file":"fuzzysearch.min.js"}